name: Java CI/CD with Gradle and Docker

# 이 워크플로우가 언제 실행될지를 정의합니다.
on:
  push:
    branches: [ "main" ] # "main" 브랜치에 push 이벤트가 발생했을 때 실행됩니다.

# 실행될 작업(job)들을 정의합니다.
jobs:
  # build-and-deploy 라는 이름의 작업을 정의합니다.
  build-and-deploy:
    # 이 작업이 실행될 가상 환경을 지정합니다. (Ubuntu 최신 버전)
    runs-on: ubuntu-latest

    # 작업의 단계(step)들을 순서대로 정의합니다.
    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4. Gradle로 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 5. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # 6. Docker 이미지 빌드 및 Push
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: kbosung/study-app:latest # 본인의 Docker Hub ID와 이미지명으로 수정

      # 7. EC2에 접속하여 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}             # EC2 인스턴스의 퍼블릭 IP 또는 DNS
          username: ${{ secrets.EC2_USERNAME }}   # EC2 접속 유저 이름 (ubuntu)
          key: ${{ secrets.EC2_PRIVATE_KEY }}       # EC2 접속을 위한 pem 키
          script: |
            cd /home/ubuntu/app
            sudo docker-compose pull
            sudo docker-compose up -d
            sudo docker image prune -f
